// <auto-generated />
using System;
using BookingApp.Resources.DBAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240606224755_DatabaseInitialization")]
    partial class DatabaseInitialization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("BookingApp.Domain.Model.Accommodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccommodationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CancelationDeadline")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinReservationDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Accommodation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccommodationType = 0,
                            CancelationDeadline = 1,
                            Images = "/Resources/Images/house.png",
                            LocationId = 1,
                            MaxGuests = 5,
                            MinReservationDays = 1,
                            Name = "Aparatmani Lučić",
                            OwnerId = 12
                        },
                        new
                        {
                            Id = 2,
                            AccommodationType = 2,
                            CancelationDeadline = 5,
                            Images = "/Resources/Images/house.png,/Resources/Images/house2.jpg",
                            LocationId = 2,
                            MaxGuests = 4,
                            MinReservationDays = 3,
                            Name = "Konak Živojin Mišić",
                            OwnerId = 12
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.AccommodationReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccommodationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReservationState")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StayLength")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("GuestId");

                    b.ToTable("AccommodationReservation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccommodationId = 1,
                            GuestId = 2,
                            NumberOfGuests = 1,
                            ReservationState = 1,
                            StartDate = new DateTime(2024, 3, 18, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 1
                        },
                        new
                        {
                            Id = 2,
                            AccommodationId = 1,
                            GuestId = 2,
                            NumberOfGuests = 2,
                            ReservationState = 1,
                            StartDate = new DateTime(2024, 3, 25, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 2
                        },
                        new
                        {
                            Id = 3,
                            AccommodationId = 1,
                            GuestId = 420,
                            NumberOfGuests = 3,
                            ReservationState = 1,
                            StartDate = new DateTime(2024, 3, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 4
                        },
                        new
                        {
                            Id = 4,
                            AccommodationId = 1,
                            GuestId = 420,
                            NumberOfGuests = 3,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 3, 12, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        },
                        new
                        {
                            Id = 5,
                            AccommodationId = 1,
                            GuestId = 2,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 3, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 1
                        },
                        new
                        {
                            Id = 6,
                            AccommodationId = 1,
                            GuestId = 2,
                            NumberOfGuests = 4,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 3, 3, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 4
                        },
                        new
                        {
                            Id = 7,
                            AccommodationId = 1,
                            GuestId = 2,
                            NumberOfGuests = 4,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 3, 15, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 1
                        },
                        new
                        {
                            Id = 8,
                            AccommodationId = 2,
                            GuestId = 421,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 1, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        },
                        new
                        {
                            Id = 9,
                            AccommodationId = 2,
                            GuestId = 421,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 1, 5, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        },
                        new
                        {
                            Id = 10,
                            AccommodationId = 2,
                            GuestId = 421,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 1, 9, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        },
                        new
                        {
                            Id = 11,
                            AccommodationId = 2,
                            GuestId = 421,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 1, 13, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        },
                        new
                        {
                            Id = 12,
                            AccommodationId = 2,
                            GuestId = 421,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 1, 17, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        },
                        new
                        {
                            Id = 13,
                            AccommodationId = 2,
                            GuestId = 421,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 1, 21, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        },
                        new
                        {
                            Id = 14,
                            AccommodationId = 2,
                            GuestId = 421,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 1, 25, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        },
                        new
                        {
                            Id = 15,
                            AccommodationId = 2,
                            GuestId = 421,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 1, 29, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        },
                        new
                        {
                            Id = 16,
                            AccommodationId = 2,
                            GuestId = 421,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 2, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        },
                        new
                        {
                            Id = 17,
                            AccommodationId = 2,
                            GuestId = 421,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 2, 6, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        },
                        new
                        {
                            Id = 18,
                            AccommodationId = 2,
                            GuestId = 421,
                            NumberOfGuests = 1,
                            ReservationState = 3,
                            StartDate = new DateTime(2024, 2, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.AccommodationReservationModificationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccommodationReservationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnerComment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RequestState")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StayLength")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationReservationId");

                    b.ToTable("AccommodationReservationModificationRequest", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 4,
                            AccommodationReservationId = 2,
                            NumberOfGuests = 2,
                            OwnerComment = "",
                            RequestState = 1,
                            StartDate = new DateTime(2024, 4, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 2
                        },
                        new
                        {
                            Id = 5,
                            AccommodationReservationId = 3,
                            NumberOfGuests = 3,
                            OwnerComment = "",
                            RequestState = 1,
                            StartDate = new DateTime(2024, 4, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 4
                        },
                        new
                        {
                            Id = 6,
                            AccommodationReservationId = 1,
                            NumberOfGuests = 2,
                            OwnerComment = "Sorry but no!",
                            RequestState = 3,
                            StartDate = new DateTime(2024, 4, 3, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StayLength = 3
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.AccommodationReservationReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccommodationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccommodationReservationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Cleanliness")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Correctness")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Images")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsInNeedOfRenovation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RenovationNeed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RuleCompliance")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("AccommodationReservationId");

                    b.HasIndex("GuestId");

                    b.HasIndex("OwnerId");

                    b.ToTable("AccommodationReservationReview", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AccommodationId = 1,
                            AccommodationReservationId = 4,
                            Cleanliness = 4,
                            Comment = "Jako dobar gost svaka preporuka",
                            Correctness = 1,
                            Direction = true,
                            GuestId = 420,
                            Images = "",
                            IsInNeedOfRenovation = false,
                            OwnerId = 12,
                            RenovationNeed = 0,
                            RuleCompliance = 5
                        },
                        new
                        {
                            Id = 3,
                            AccommodationId = 1,
                            AccommodationReservationId = 4,
                            Cleanliness = 5,
                            Comment = "Dobar vlasnik",
                            Correctness = 5,
                            Direction = false,
                            GuestId = 420,
                            Images = "",
                            IsInNeedOfRenovation = false,
                            OwnerId = 12,
                            RenovationNeed = 0,
                            RuleCompliance = 0
                        },
                        new
                        {
                            Id = 4,
                            AccommodationId = 1,
                            AccommodationReservationId = 5,
                            Cleanliness = 2,
                            Comment = "Los vlasnik",
                            Correctness = 2,
                            Direction = false,
                            GuestId = 2,
                            Images = "/data/img/slika.jpg,/data/img/house.jpg",
                            IsInNeedOfRenovation = true,
                            OwnerId = 12,
                            RenovationNeed = 2,
                            RuleCompliance = 0
                        },
                        new
                        {
                            Id = 5,
                            AccommodationId = 1,
                            AccommodationReservationId = 6,
                            Cleanliness = 3,
                            Comment = "Ok vlasnik",
                            Correctness = 4,
                            Direction = false,
                            GuestId = 2,
                            IsInNeedOfRenovation = false,
                            OwnerId = 12,
                            RenovationNeed = 0,
                            RuleCompliance = 0
                        },
                        new
                        {
                            Id = 6,
                            AccommodationId = 1,
                            AccommodationReservationId = 6,
                            Cleanliness = 5,
                            Comment = "Prosjecan gost",
                            Correctness = 5,
                            Direction = true,
                            GuestId = 2,
                            Images = "",
                            IsInNeedOfRenovation = false,
                            OwnerId = 12,
                            RenovationNeed = 0,
                            RuleCompliance = 1
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Checkpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TourId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TourId");

                    b.ToTable("Checkpoint", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = false,
                            LocationId = 1,
                            Name = "Limanski park",
                            TourId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsActive = false,
                            LocationId = 1,
                            Name = "Dunavski park",
                            TourId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsActive = false,
                            LocationId = 2,
                            Name = "Fruskogorski manastiri",
                            TourId = 2
                        },
                        new
                        {
                            Id = 4,
                            IsActive = false,
                            LocationId = 3,
                            Name = "Manastir Ostrog",
                            TourId = 3
                        },
                        new
                        {
                            Id = 5,
                            IsActive = false,
                            LocationId = 2,
                            Name = "Manastir Krušedol",
                            TourId = 2
                        },
                        new
                        {
                            Id = 6,
                            IsActive = false,
                            LocationId = 1,
                            Name = "Park na Grbavici",
                            TourId = 1
                        },
                        new
                        {
                            Id = 7,
                            IsActive = false,
                            LocationId = 1,
                            Name = "Železnički park",
                            TourId = 1
                        },
                        new
                        {
                            Id = 8,
                            IsActive = false,
                            LocationId = 1,
                            Name = "Kamenički park",
                            TourId = 1
                        },
                        new
                        {
                            Id = 9,
                            IsActive = false,
                            LocationId = 2,
                            Name = "Petkovica",
                            TourId = 2
                        },
                        new
                        {
                            Id = 10,
                            IsActive = false,
                            LocationId = 2,
                            Name = "Mala Remeta",
                            TourId = 2
                        },
                        new
                        {
                            Id = 11,
                            IsActive = false,
                            LocationId = 4,
                            Name = "Bascarsija",
                            TourId = 4
                        },
                        new
                        {
                            Id = 12,
                            IsActive = false,
                            LocationId = 4,
                            Name = "Trebevic",
                            TourId = 4
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ForumId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOwnerComment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUseful")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumOfReports")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentText = "Preporucujem konak u rumenackoj ulici, ne sjecam se kako se zove.",
                            ForumId = 1,
                            IsOwnerComment = false,
                            IsUseful = false,
                            NumOfReports = 0,
                            PublishedDate = new DateTime(2024, 3, 18, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.ComplexTourPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ComplexTourRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("GuideId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotifyTourist")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TourRequestState")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ComplexTourRequestId");

                    b.ToTable("ComplexTourPart", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovedDate = new DateTime(2024, 6, 23, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Belgrade",
                            ComplexTourRequestId = 1,
                            Country = "Serbia",
                            Description = "A simple tour part in Belgrade.",
                            EndDate = new DateTime(2024, 6, 23, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            GuideId = 0,
                            Language = "English",
                            NotifyTourist = false,
                            NumberOfParticipants = 10,
                            StartDate = new DateTime(2024, 6, 21, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TourName = "Zanimljivosti Beograda",
                            TourRequestState = 0
                        },
                        new
                        {
                            Id = 2,
                            ApprovedDate = new DateTime(2024, 6, 26, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Novi Sad",
                            ComplexTourRequestId = 1,
                            Country = "Serbia",
                            Description = "A simple tour part in Novi Sad.",
                            EndDate = new DateTime(2024, 6, 26, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            GuideId = 0,
                            Language = "English",
                            NotifyTourist = false,
                            NumberOfParticipants = 15,
                            StartDate = new DateTime(2024, 6, 24, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TourName = "Zanimljivosti Novog Sada",
                            TourRequestState = 0
                        },
                        new
                        {
                            Id = 3,
                            ApprovedDate = new DateTime(2024, 6, 24, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Mali Zvornik",
                            ComplexTourRequestId = 2,
                            Country = "Serbia",
                            Description = "Ae da ronimo po Drini gnjurci",
                            EndDate = new DateTime(2024, 6, 24, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            GuideId = 0,
                            Language = "English",
                            NotifyTourist = false,
                            NumberOfParticipants = 10,
                            StartDate = new DateTime(2024, 6, 22, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TourName = "Obilazak Malog Zvornika",
                            TourRequestState = 0
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.ComplexTourRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TouristId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TouristId");

                    b.ToTable("ComplexTourRequest", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Upoznaj Beograd i Novi Sad",
                            TouristId = 8
                        },
                        new
                        {
                            Id = 2,
                            Name = "Obilazak zapada",
                            TouristId = 8
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.CurrentDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CurrentDate", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 3, 17, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GuestComments")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUseful")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerComments")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LocationId");

                    b.ToTable("Forum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            Description = "Priuštiva prenoćišta u Novom Sadu",
                            GuestComments = 0,
                            IsClosed = false,
                            IsUseful = false,
                            LocationId = 1,
                            Name = "Prenoćišta u Novom Sadu",
                            OwnerComments = 0
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.ForumAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForumId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isOpened")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ForumAlert");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ForumId = 1,
                            OwnerId = 11,
                            isOpened = false
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Location", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Novi Sad",
                            Country = "Serbia"
                        },
                        new
                        {
                            Id = 2,
                            City = "Fruska gora",
                            Country = "Serbia"
                        },
                        new
                        {
                            Id = 3,
                            City = "Danilovgrad",
                            Country = "Crna Gora"
                        },
                        new
                        {
                            Id = 4,
                            City = "Sarajevo",
                            Country = "Bosnia and Herzegovina"
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Renovation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccommodationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EstimatedDuration")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("State")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isCanceled")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Renovation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccommodationId = 2,
                            EndDate = new DateOnly(2024, 3, 28),
                            EstimatedDuration = 5,
                            StartDate = new DateOnly(2024, 3, 18),
                            State = true,
                            isCanceled = false
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuideId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxTouristNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.HasIndex("LocationId");

                    b.ToTable("Tour", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSeats = 2,
                            Description = "Obilazak parkova u Novom Sadu",
                            Duration = 2,
                            GuideId = 9,
                            Images = "https://gradskeinfo.rs/wp-content/uploads/2022/04/dunavski-park-1.jpg",
                            Language = "English",
                            LocationId = 1,
                            MaxTouristNumber = 15,
                            Name = "Parkovi Novog Sada"
                        },
                        new
                        {
                            Id = 2,
                            AvailableSeats = 0,
                            Description = "Obilazak fruskogorskih manastira. Na prostoru 50 kilometara dužine i 10 kilometara širine na Fruškoj Gori je smešteno šesnaest srpskih pravoslavnih manastira.",
                            Duration = 2,
                            GuideId = 9,
                            Images = "https://www.idemonaput.rs/wp-content/uploads/2020/11/cov17-768x403.jpg",
                            Language = "Serbian",
                            LocationId = 2,
                            MaxTouristNumber = 20,
                            Name = "Fruskogorski manastiri"
                        },
                        new
                        {
                            Id = 3,
                            AvailableSeats = 0,
                            Description = "Hodočašće u manastir Ostrog",
                            Duration = 2,
                            GuideId = 10,
                            Images = "https://i0.wp.com/www.durmitor.rs/wp-content/uploads/2014/03/ostrog.jpg?w=800&ssl=1",
                            Language = "Spanish",
                            LocationId = 3,
                            MaxTouristNumber = 25,
                            Name = "Manastir Ostrog"
                        },
                        new
                        {
                            Id = 4,
                            AvailableSeats = 0,
                            Description = "You have the chance to visit the capital of Bosnia and Herzegovina as well as its greatest sights",
                            Duration = 2,
                            GuideId = 9,
                            Images = "https://a.cdn-hotels.com/gdcs/production32/d702/0efac108-32eb-435f-811e-59d516d808ac.jpg?impolicy=fcrop&w=800&h=533&q=medium",
                            Language = "German",
                            LocationId = 4,
                            MaxTouristNumber = 15,
                            Name = "Visit Sarajevo"
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CheckpointJoinedId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TourReservationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TouristId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CheckpointJoinedId");

                    b.HasIndex("TourReservationId");

                    b.HasIndex("TouristId");

                    b.ToTable("TourAttendance", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 22,
                            IsConfirmed = false,
                            IsPresent = false,
                            TourReservationId = 1,
                            TouristId = 3
                        },
                        new
                        {
                            Id = 2,
                            Age = 21,
                            IsConfirmed = false,
                            IsPresent = false,
                            TourReservationId = 3,
                            TouristId = 8
                        },
                        new
                        {
                            Id = 3,
                            Age = 21,
                            CheckpointJoinedId = 1,
                            IsConfirmed = true,
                            IsPresent = true,
                            TourReservationId = 4,
                            TouristId = 8
                        },
                        new
                        {
                            Id = 4,
                            Age = 21,
                            IsConfirmed = false,
                            IsPresent = true,
                            TourReservationId = 5,
                            TouristId = 8
                        },
                        new
                        {
                            Id = 5,
                            Age = 27,
                            IsConfirmed = false,
                            IsPresent = false,
                            TourReservationId = 6,
                            TouristId = 3
                        },
                        new
                        {
                            Id = 6,
                            Age = 27,
                            CheckpointJoinedId = 2,
                            IsConfirmed = false,
                            IsPresent = false,
                            TourReservationId = 7,
                            TouristId = 3
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CheckpointJoinedId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ComplexTourPartId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TourRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TourReservationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ComplexTourPartId");

                    b.HasIndex("TourRequestId");

                    b.HasIndex("TourReservationId");

                    b.ToTable("TourParticipant", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 22,
                            Email = "volemzenerumunke@gmail.com",
                            FirstName = "Nikola",
                            IsPresent = false,
                            LastName = "Radojcic",
                            TourReservationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Age = 13,
                            Email = "bosanac02@gmail.com",
                            FirstName = "Dragan",
                            IsPresent = false,
                            LastName = "Misic",
                            TourReservationId = 1
                        },
                        new
                        {
                            Id = 3,
                            Age = 55,
                            Email = "anapetrovic@gmail.com",
                            FirstName = "Ana",
                            IsPresent = false,
                            LastName = "Petrovic",
                            TourReservationId = 3
                        },
                        new
                        {
                            Id = 4,
                            Age = 33,
                            Email = "markojovanovic@gmail.com",
                            FirstName = "Marko",
                            IsPresent = false,
                            LastName = "Jovanovic",
                            TourReservationId = 1
                        },
                        new
                        {
                            Id = 5,
                            Age = 14,
                            Email = "milosnikolic@gmail.com",
                            FirstName = "Milos",
                            IsPresent = false,
                            LastName = "Nikolic",
                            TourReservationId = 2
                        },
                        new
                        {
                            Id = 6,
                            Age = 25,
                            Email = "ivanadjokovic@gmail.com",
                            FirstName = "Ivana",
                            IsPresent = false,
                            LastName = "Djokovic",
                            TourReservationId = 2
                        },
                        new
                        {
                            Id = 7,
                            Age = 56,
                            Email = "milanadjokovic@gmail.com",
                            FirstName = "Milana",
                            IsPresent = false,
                            LastName = "Djokovic",
                            TourReservationId = 2
                        },
                        new
                        {
                            Id = 8,
                            Age = 33,
                            Email = "milanadjokodsavic@gmail.com",
                            FirstName = "Milanda",
                            IsPresent = false,
                            LastName = "Djokovidsc",
                            TourRequestId = 1
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotifyTourist")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TourRequestState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TouristId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TouristId");

                    b.ToTable("TourRequest", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Chichen Itza",
                            Country = "Mexico",
                            Description = "Descubre las antiguas ruinas mayas y su fascinante historia.",
                            EndDate = new DateTime(2022, 3, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Language = "Spanish",
                            NotifyTourist = false,
                            NumberOfParticipants = 2,
                            StartDate = new DateTime(2022, 3, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            TourName = "Recorrido por las Ruinas Mayas",
                            TourRequestState = 1,
                            TouristId = 8
                        },
                        new
                        {
                            Id = 2,
                            City = "Rome",
                            Country = "Italy",
                            Description = "Experience the glory of ancient Rome with a knowledgeable guide.",
                            EndDate = new DateTime(2022, 5, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Language = "Italian",
                            NotifyTourist = false,
                            NumberOfParticipants = 3,
                            StartDate = new DateTime(2022, 5, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            TourName = "Tour of Ancient Rome",
                            TourRequestState = 1,
                            TouristId = 8
                        },
                        new
                        {
                            Id = 3,
                            City = "Interlaken",
                            Country = "Switzerland",
                            Description = "Embark on an adventurous hike through the breathtaking Swiss Alps.",
                            EndDate = new DateTime(2022, 4, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            Language = "English",
                            NotifyTourist = false,
                            NumberOfParticipants = 2,
                            StartDate = new DateTime(2022, 4, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            TourName = "Hiking in the Swiss Alps",
                            TourRequestState = 2,
                            TouristId = 8
                        },
                        new
                        {
                            Id = 4,
                            City = "Bordeaux",
                            Country = "France",
                            Description = "Indulge in the finest wines of Bordeaux and explore its picturesque vineyards.",
                            EndDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            Language = "French",
                            NotifyTourist = false,
                            NumberOfParticipants = 1,
                            StartDate = new DateTime(2023, 4, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            TourName = "Wine Tasting in Bordeaux",
                            TourRequestState = 2,
                            TouristId = 8
                        },
                        new
                        {
                            Id = 5,
                            City = "Bordeaux",
                            Country = "France",
                            Description = "Indulge in the finest wines of Bordeaux and explore its picturesque vineyards.",
                            EndDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            Language = "English",
                            NotifyTourist = false,
                            NumberOfParticipants = 4,
                            StartDate = new DateTime(2023, 5, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            TourName = "Visiting Bordeaux",
                            TourRequestState = 1,
                            TouristId = 8
                        },
                        new
                        {
                            Id = 6,
                            City = "Iquitos",
                            Country = "Peru",
                            Description = "Sumérgete en la exuberante selva amazónica y descubre su increíble biodiversidad.",
                            EndDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Language = "Spanish",
                            NotifyTourist = false,
                            NumberOfParticipants = 1,
                            StartDate = new DateTime(2023, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            TourName = "Aventura en la Selva Amazónica",
                            TourRequestState = 2,
                            TouristId = 8
                        },
                        new
                        {
                            Id = 7,
                            City = "Novi Sad",
                            Country = "Serbia",
                            Description = "Obilazak Petrovaradinske tvrdjave i njenih tunela",
                            EndDate = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            Language = "English",
                            NotifyTourist = false,
                            NumberOfParticipants = 1,
                            StartDate = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            TourName = "Obilazak Petrovaradina",
                            TourRequestState = 0,
                            TouristId = 8
                        },
                        new
                        {
                            Id = 8,
                            City = "Novi Sad",
                            Country = "Serbia",
                            Description = "Crkve Starog grada",
                            EndDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            Language = "Spanish",
                            NotifyTourist = false,
                            NumberOfParticipants = 1,
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            TourName = "Obilazak Crkvi Novog Sada",
                            TourRequestState = 0,
                            TouristId = 8
                        },
                        new
                        {
                            Id = 9,
                            City = "Brcko DS",
                            Country = "Bosnia and Herzegovina",
                            Description = "Visit the most beautiful beauties of Bosnia with us.",
                            EndDate = new DateTime(2024, 6, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            Language = "German",
                            NotifyTourist = false,
                            NumberOfParticipants = 1,
                            StartDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            TourName = "Posetimo Bosnu",
                            TourRequestState = 2,
                            TouristId = 8
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("GuideId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TourId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TourState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TouristsNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.HasIndex("TourId");

                    b.ToTable("TourReservation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAndTime = new DateTime(2024, 5, 28, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            GuideId = 9,
                            TourId = 1,
                            TourState = 2,
                            TouristsNumber = 4
                        },
                        new
                        {
                            Id = 2,
                            DateAndTime = new DateTime(2024, 5, 27, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            GuideId = 10,
                            TourId = 2,
                            TourState = 2,
                            TouristsNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            DateAndTime = new DateTime(2024, 5, 23, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            GuideId = 9,
                            TourId = 1,
                            TourState = 0,
                            TouristsNumber = 1
                        },
                        new
                        {
                            Id = 4,
                            DateAndTime = new DateTime(2024, 5, 7, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            GuideId = 9,
                            TourId = 2,
                            TourState = 2,
                            TouristsNumber = 1
                        },
                        new
                        {
                            Id = 5,
                            DateAndTime = new DateTime(2024, 5, 28, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            GuideId = 10,
                            TourId = 3,
                            TourState = 2,
                            TouristsNumber = 1
                        },
                        new
                        {
                            Id = 6,
                            DateAndTime = new DateTime(2024, 5, 18, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            GuideId = 9,
                            TourId = 2,
                            TourState = 0,
                            TouristsNumber = 0
                        },
                        new
                        {
                            Id = 7,
                            DateAndTime = new DateTime(2024, 3, 28, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            GuideId = 9,
                            TourId = 1,
                            TourState = 2,
                            TouristsNumber = 0
                        },
                        new
                        {
                            Id = 8,
                            DateAndTime = new DateTime(2024, 5, 16, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            GuideId = 9,
                            TourId = 4,
                            TourState = 0,
                            TouristsNumber = 0
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GuideId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interestingness")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Knowledge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewImages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TourAttendanceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TourReservationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TourAttendanceId");

                    b.HasIndex("TourReservationId");

                    b.ToTable("TourReview", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Great experience!",
                            GuideId = 9,
                            Interestingness = 4,
                            IsValid = true,
                            Knowledge = 4,
                            Language = 5,
                            ReviewImages = "",
                            TourAttendanceId = 6,
                            TourReservationId = 6
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "peraperic@gmail.com",
                            FirstName = "Pera",
                            LastName = "Peric",
                            Password = "peric",
                            Username = "pera"
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TouristId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TouristId");

                    b.ToTable("Voucher", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpirationDate = new DateTime(2024, 4, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            IsGlobal = false,
                            Name = "20% discount",
                            TouristId = 8
                        },
                        new
                        {
                            Id = 2,
                            ExpirationDate = new DateTime(2023, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            IsGlobal = false,
                            Name = "Summer starter",
                            TouristId = 8
                        },
                        new
                        {
                            Id = 3,
                            ExpirationDate = new DateTime(2023, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            IsGlobal = false,
                            Name = "Summer starter",
                            TouristId = 8
                        },
                        new
                        {
                            Id = 4,
                            ExpirationDate = new DateTime(2024, 2, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            IsGlobal = false,
                            Name = "Winter Wonderland",
                            TouristId = 8
                        },
                        new
                        {
                            Id = 5,
                            ExpirationDate = new DateTime(2024, 3, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            IsGlobal = false,
                            Name = "Family Pack",
                            TouristId = 8
                        },
                        new
                        {
                            Id = 6,
                            ExpirationDate = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            IsGlobal = false,
                            Name = "Adventure Trip",
                            TouristId = 8
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.VoucherUse", b =>
                {
                    b.Property<int>("VoucherId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int>("TourReservationId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("VoucherId", "TourReservationId");

                    b.HasIndex("TourReservationId");

                    b.ToTable("VoucherUse", (string)null);

                    b.HasData(
                        new
                        {
                            VoucherId = 3,
                            TourReservationId = 1
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Guest", b =>
                {
                    b.HasBaseType("BookingApp.Domain.Model.User");

                    b.Property<bool>("IsSuperGuest")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuperGuestDiscountCouponCount")
                        .HasColumnType("INTEGER");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Guest");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "lopD@gmail.com",
                            FirstName = "Dusko",
                            LastName = "Radic",
                            Password = "radic",
                            Username = "dusko",
                            IsSuperGuest = true,
                            SuperGuestDiscountCouponCount = 1
                        },
                        new
                        {
                            Id = 420,
                            Email = "radandecko@gmail.com",
                            FirstName = "Radenko",
                            LastName = "Radic",
                            Password = "radic",
                            Username = "radenko",
                            IsSuperGuest = false,
                            SuperGuestDiscountCouponCount = 0
                        },
                        new
                        {
                            Id = 421,
                            Email = "superdusko@gmail.com",
                            FirstName = "Dusko",
                            LastName = "Radic",
                            Password = "radic",
                            Username = "superdusko",
                            IsSuperGuest = false,
                            SuperGuestDiscountCouponCount = 0
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Guide", b =>
                {
                    b.HasBaseType("BookingApp.Domain.Model.User");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Guide");

                    b.HasData(
                        new
                        {
                            Id = 9,
                            Email = "mojaavlija@gmail.com",
                            FirstName = "Milovan",
                            LastName = "Drecun",
                            Password = "a",
                            Username = "a"
                        },
                        new
                        {
                            Id = 10,
                            Email = "spopadanTopalko@gmail.com",
                            FirstName = "Milan",
                            LastName = "Topalovic",
                            Password = "ftn",
                            Username = "spopalko"
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Owner", b =>
                {
                    b.HasBaseType("BookingApp.Domain.Model.User");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Owner");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Email = "draganmisic59@gmail.com",
                            FirstName = "Dragan",
                            LastName = "Misic",
                            Password = "misic",
                            Username = "dragan"
                        },
                        new
                        {
                            Id = 12,
                            Email = "danielmisic@gmail.com",
                            FirstName = "Daniel",
                            LastName = "Misic",
                            Password = "misic",
                            Username = "daniel"
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Tourist", b =>
                {
                    b.HasBaseType("BookingApp.Domain.Model.User");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Tourist");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "gagi@gmail.com",
                            FirstName = "Dragan",
                            LastName = "Vucicevic",
                            Password = "123",
                            Username = "dragan"
                        },
                        new
                        {
                            Id = 4,
                            Email = "savic@gmail.com",
                            FirstName = "Savo",
                            LastName = "Savic",
                            Password = "ftn",
                            Username = "savo"
                        },
                        new
                        {
                            Id = 5,
                            Email = "filip@gmail.com",
                            FirstName = "Filip",
                            LastName = "Filipovic",
                            Password = "a",
                            Username = "filip"
                        },
                        new
                        {
                            Id = 6,
                            Email = "maremagare@gmail.com",
                            FirstName = "Marko",
                            LastName = "Kuburic",
                            Password = "456",
                            Username = "marko"
                        },
                        new
                        {
                            Id = 7,
                            Email = "losmi@gmail.com",
                            FirstName = "Milos",
                            LastName = "Trifkovic",
                            Password = "def",
                            Username = "Milos"
                        },
                        new
                        {
                            Id = 8,
                            Email = "savic0120@gmail.com",
                            FirstName = "Savo",
                            LastName = "Savic",
                            Password = "s",
                            Username = "sav0"
                        });
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Accommodation", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.AccommodationReservation", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Accommodation", "Accommodation")
                        .WithMany("AccommodationReservations")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.AccommodationReservationModificationRequest", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.AccommodationReservation", "AccommodationReservation")
                        .WithMany()
                        .HasForeignKey("AccommodationReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccommodationReservation");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.AccommodationReservationReview", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Accommodation", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.AccommodationReservation", "AccommodationReservation")
                        .WithMany()
                        .HasForeignKey("AccommodationReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("AccommodationReservation");

                    b.Navigation("Guest");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Checkpoint", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.Tour", "Tour")
                        .WithMany("Checkpoints")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Comment", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Forum", null)
                        .WithMany("Comments")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.ComplexTourPart", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.ComplexTourRequest", "ComplexTourRequest")
                        .WithMany("Parts")
                        .HasForeignKey("ComplexTourRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplexTourRequest");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.ComplexTourRequest", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Tourist", "Tourist")
                        .WithMany()
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Forum", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Guest", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Tour", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Guide", "Guide")
                        .WithMany()
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guide");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourAttendance", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Checkpoint", "CheckpointJoined")
                        .WithMany()
                        .HasForeignKey("CheckpointJoinedId");

                    b.HasOne("BookingApp.Domain.Model.TourReservation", "TourReservation")
                        .WithMany()
                        .HasForeignKey("TourReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.Tourist", "Tourist")
                        .WithMany()
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckpointJoined");

                    b.Navigation("TourReservation");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourParticipant", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.ComplexTourPart", null)
                        .WithMany("TourParticipants")
                        .HasForeignKey("ComplexTourPartId");

                    b.HasOne("BookingApp.Domain.Model.TourRequest", null)
                        .WithMany("TourParticipants")
                        .HasForeignKey("TourRequestId");

                    b.HasOne("BookingApp.Domain.Model.TourReservation", "TourReservation")
                        .WithMany("TourParticipants")
                        .HasForeignKey("TourReservationId");

                    b.Navigation("TourReservation");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourRequest", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Tourist", "Tourist")
                        .WithMany()
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourReservation", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Guide", "Guide")
                        .WithMany()
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guide");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourReview", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.TourAttendance", "TourAttendance")
                        .WithMany()
                        .HasForeignKey("TourAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.TourReservation", "TourReservation")
                        .WithMany()
                        .HasForeignKey("TourReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourAttendance");

                    b.Navigation("TourReservation");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Voucher", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.Tourist", "Tourist")
                        .WithMany()
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.VoucherUse", b =>
                {
                    b.HasOne("BookingApp.Domain.Model.TourReservation", "TourReservation")
                        .WithMany()
                        .HasForeignKey("TourReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Domain.Model.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourReservation");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Accommodation", b =>
                {
                    b.Navigation("AccommodationReservations");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.ComplexTourPart", b =>
                {
                    b.Navigation("TourParticipants");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.ComplexTourRequest", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Forum", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.Tour", b =>
                {
                    b.Navigation("Checkpoints");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourRequest", b =>
                {
                    b.Navigation("TourParticipants");
                });

            modelBuilder.Entity("BookingApp.Domain.Model.TourReservation", b =>
                {
                    b.Navigation("TourParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
